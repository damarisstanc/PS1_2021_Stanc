#include <LiquidCrystal.h>

#define BUTTON_OK 6
#define BUTTON_CANCEL 7
#define BUTTON_PREV 8
#define BUTTON_NEXT 9
#define BEC_pin 10

volatile int s = 0, m = 0, h = 0;
volatile bool one_second = false;// flag pentru o secunda
volatile bool two_second = false;// flag pentru doua secunde
volatile float temperatura, prev_error, setpoint = 35, suma_error, moving_sp;
volatile float kpp, kii, kdd;
bool flag1 = false;
bool flag2 = false;
float dt_inc = 0, dt_rac = 0;
float T1 = 0, T2 = 0;
unsigned long uptime = -1;
void timer1()
{
  DDRB |= 1 << PB5;
  TCCR1A = 0;
  TCCR1B = 0;
  TCCR1B |= (1 << WGM12) | (1 << CS12) | _BV(CS10) ;
  TIMSK1 |= (1 << OCIE1A) ;
  OCR1A = 15624;

  sei();
}

enum Buttons {
  EV_OK,
  EV_CANCEL,
  EV_NEXT,
  EV_PREV,
  EV_NONE,
  EV_MAX_NUM
};

enum Menus {
  MENU_MAIN = 0,
  MENU_START,
  MENU_KP,
  MENU_KI,
  MENU_KD,
  MENU_TEMP,
  MENU_TINCAL,
  MENU_TMEN,
  MENU_TRAC,
  MENU_MAX_NUM
};

LiquidCrystal lcd(12, 11, 5, 4, 3, 2);
double temp = 30;
double kp = 20;
double ki=18;
double kd=16;
float temp_q = 0;
Menus scroll_menu = MENU_MAIN;
Menus current_menu =  MENU_MAIN;
int timp_inc=60;
int timp_men=30;
int timp_rac=40;

void state_machine(enum Menus menu, enum Buttons button);
Buttons GetButtons (void);
void print_menu(enum Menus menu);

typedef void (state_machine_handler_t)(void);

void afisare_timp(void)
{
    int min=0; int sec=0;
    int remaining=0;
    uptime++;
    
    int timp_i = timp_inc;
  int timp_m = timp_men;
  int timp_r = timp_rac;
  float tem = temp;

  if (temperatura > 0)
  {

    lcd.setCursor(11, 0);
    lcd.print(temperatura);
    if (flag1 == false)
    {
      flag1 = true;

      dt_inc = (tem - temperatura) / (timp_i);
      T1 = temperatura;
    }

  }

  lcd.setCursor(0, 0);
  lcd.print("P:");
  lcd.print (moving_sp);
  lcd.setCursor(0, 1);
  if (uptime < timp_i)
  {
    lcd.print(" TInc:");

    moving_sp = dt_inc * uptime + T1;

    remaining = timp_i - uptime;
  }
  else if (uptime <= (timp_i + timp_m))
  { lcd.print(" TMen:");
    remaining = (timp_i + timp_m) - uptime;
  }
  else if (uptime <= (timp_i + timp_m + timp_r))
  { lcd.print(" TRac:");
    if (flag2 == false)
    {
      flag2 = true;
      dt_rac = (T1 - temperatura) / (timp_r);
      T2 = temperatura;
    }
    //Serial.println(dt_rac);
    moving_sp = dt_rac * (uptime - (timp_i + timp_m)) + T2;
    remaining = (timp_i + timp_m + timp_r) - uptime;
  }
  else
    lcd.print("Oprit: ");
  min = remaining / 60;
  sec = remaining % 60;
  lcd.print(min);
  lcd.print(":");
  lcd.print (sec);
  PID();
}

void print_menu(enum Menus menu)
{

  switch (menu)
  {
    case MENU_KP:
      lcd.setCursor(0, 0);
      lcd.print("KP = ");
      lcd.setCursor(5, 0);
      lcd.print(kp);
      break;
    case MENU_KI:
      lcd.setCursor(0, 0);
      lcd.print("KI = ");
      lcd.setCursor(5, 0);
      lcd.print(ki);
      break;
    case MENU_KD:
      lcd.setCursor(0, 0);
      lcd.print("KD = ");
      lcd.setCursor(5, 0);
      lcd.print(kd);
      break;
    case MENU_TEMP:
      lcd.setCursor(0, 0);
      lcd.print("Temp = ");
      if (temp < 50)
      { lcd.setCursor(7, 1);
        lcd.print(temp);
      }
      else
      { lcd.setCursor(7, 1);
        lcd.print("MAX!");
      }
      break;
    case MENU_TINCAL:
      lcd.setCursor(0, 0);
      lcd.print("TINCAL = ");
      lcd.setCursor(9, 0);
      lcd.print(timp_inc);
      break;
    case MENU_TMEN:
      lcd.setCursor(0, 0);
      lcd.print("TMEN = ");
      lcd.setCursor(7, 0);
      lcd.print(timp_men);
      break;
    case MENU_TRAC:
      lcd.setCursor(0, 0);
      lcd.print("TRAC = ");
      lcd.setCursor(7, 0);
      lcd.print(timp_rac);
      break;
    case MENU_START:
      lcd.setCursor(0, 0);
      lcd.print("START!");
      break;

    case MENU_MAIN:
    default:
      lcd.setCursor(5, 0);
      lcd.print("PS 2020");

      break;
  }
  
  if (current_menu == MENU_START)
  {

    afisare_timp();
  }
  else if (current_menu != MENU_MAIN)
  {
    lcd.setCursor(0, 0);
    lcd.print("Mod.");

  }
}
void enter_menu(void)
{
  current_menu = scroll_menu;
}

void go_home(void)
{
  scroll_menu = MENU_MAIN;
  current_menu = scroll_menu;
}

void go_next(void)
{
  scroll_menu = (Menus) ((int)scroll_menu + 1);
  scroll_menu = (Menus) ((int)scroll_menu % MENU_MAX_NUM);
}

void go_prev(void)
{
  scroll_menu = (Menus) ((int)scroll_menu - 1);
  scroll_menu = (Menus) ((int)scroll_menu % MENU_MAX_NUM);
}
void save(void)
{
  go_home();
}

//Kp
void save_kp(void)
{
}

void inc_kp(void)
{
  kp++;
}

void dec_kp(void)
{
  kp--;
}
//Ki
void save_ki(void)
{
}

void inc_ki(void)
{
  ki++;
}

void dec_ki(void)
{
  ki--;
}
//Kd
void save_kd(void)
{
}

void inc_kd(void)
{
  kd++;
}

void dec_kd(void)
{
  kd--;
}
//temp
void save_temp(void)
{
}

void inc_temp(void)
{
  temp++;
}

void dec_temp(void)
{
  temp--;
}
void cancel_temp(void)
{
  go_home();
}

void cancel_kp(void)
{
  go_home();
}

void cancel_ki(void)
{
  go_home();
}

void cancel_kd(void)
{
  go_home();
}
void cancel_timp_inc(void)
{
  go_home();
}

void inc_timp_inc(void)
{
  timp_inc++;
}

void dec_timp_inc(void)
{
  timp_inc--;
}

void cancel_timp_men(void)
{
  go_home();
}

void inc_timp_men(void)
{
  timp_men++;
}

void dec_timp_men(void)
{
  timp_men--;
}

void cancel_timp_rac(void)
{
  go_home();
}
void inc_timp_rac(void)
{
  timp_rac++;
}

void dec_timp_rac(void)
{
  timp_rac--;
}


state_machine_handler_t* sm[MENU_MAX_NUM][EV_MAX_NUM] = 
{ //events: OK , CANCEL , NEXT, PREV
  {enter_menu, go_home, go_next, go_prev},  // MENU_MAIN
  {save, cancel_kp, inc_kp, dec_kp},              // MENU_KP
  {save, cancel_ki, inc_ki, dec_ki},              // MENU_Ki
  {save, cancel_kd, inc_kd, dec_kd},              // MENU_Kd
  {save, cancel_temp, inc_temp, dec_temp},        // MENU_TEMP
  {save, cancel_timp_inc, inc_timp_inc, dec_timp_inc},  // MENU_TINCAL
  {save, cancel_timp_men, inc_timp_men, dec_timp_men},        // MENU_TMEN
  {save, cancel_timp_rac, inc_timp_rac, dec_timp_rac}         // MENU_TRAC
};

void state_machine(enum Menus menu, enum Buttons button)
{
  sm[menu][button]();
}

Buttons GetButtons(void)
{
  enum Buttons ret_val = EV_NONE;
  if (digitalRead(BUTTON_OK))
  {
    ret_val = EV_OK;
  }
  else if (digitalRead(BUTTON_CANCEL))
  {
    ret_val = EV_CANCEL;
  }
  else if (digitalRead(BUTTON_NEXT))
  {
    ret_val = EV_NEXT;
  }
  else if (digitalRead(BUTTON_PREV))
  {
    ret_val = EV_PREV;
  }
  Serial.print(ret_val);
  return ret_val;
}

void setup()
{
  Serial.begin(9600);
  lcd.begin(16,2);
  pinMode(6, INPUT);
  digitalWrite(6, LOW); // pull-down
    pinMode(7, INPUT);
  digitalWrite(7, LOW); // pull-down
    pinMode(8, INPUT);
  digitalWrite(8, LOW); // pull-down
    pinMode(9, INPUT);
  digitalWrite(9, LOW); // pull-down
   pinMode(BEC_pin, OUTPUT);
  timer1();
   adc_init();
}
void adc_init(void) 
{
ADCSRA|=((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));
ADMUX |= (1<<REFS0);
ADCSRA |= (1<<ADEN); 
ADCSRA |= (1<<ADSC); 
}

uint16_t read_adc(uint8_t channel) 
{
ADMUX &= 0xF0; //set input A0 to A5
ADMUX |= channel;//select channel A0 to A5
ADCSRA |= (1<<ADSC); //start conversion
while (ADCSRA & (1<<ADSC)); //wait while adc conversion are not updated
return ADC; //read and return
}
float voltage=0;
float temperatureCelsius;
int reading;

void loop()
{
  reading=read_adc(0);
  voltage=reading*5.0; 
  voltage/=1024.0;
  temperatureCelsius=(voltage-0.5)*100;
  
  if (one_second)
  {
    if (two_second)
    {
      temperatura = temperatureCelsius;
      lcd.clear();
      two_second = false;
    }
    
    kpp = kp;
    kdd = kd;
    kii = ki;//
    
    volatile Buttons event = GetButtons();
    if (event != EV_NONE)
    {
      state_machine(current_menu, event);
    }
    print_menu(scroll_menu);
    one_second = false;
  }
}

ISR(TIMER1_COMPA_vect)
{
  PORTB ^= _BV(PB5);
  if (digitalRead(13) == 0)
    two_second = true;
  s++;
  if (s == 60)
  {
    m++;
    s = 0;
    if (m == 60)
    {
      h++;
      m = 0;
    }
  }
  one_second = true;
}
void PID()
{
  float error =  moving_sp - temperatura;
  if (error < 3 && error > -3)
    suma_error += error;
  suma_error = constrain(suma_error, -15, 15);
  float diff = (error - prev_error);
  float output = kp * error + ki * suma_error + kd * diff;
  output = constrain(output, 0, 100);
  prev_error = error;

  Serial.print(0.05 * output); //tensiune pe bec
  Serial.print(" ");
  Serial.println(temperatura);


  analogWrite(BEC_pin, int(output));
}
