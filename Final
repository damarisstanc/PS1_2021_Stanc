#include <LiquidCrystal.h>
#include <Wire.h>
#include <SFE_BMP180.h>

SFE_BMP180 bmp180;

#define BUTTON_OK 6
#define BUTTON_CANCEL 7
#define BUTTON_PREV 8
#define BUTTON_NEXT 9

enum Buttons {
  EV_OK,
  EV_CANCEL,
  EV_NEXT,
  EV_PREV,
  EV_NONE,
  EV_MAX_NUM
};

enum Menus {
  MENU_MAIN = 0,
  MENU_KP,
  MENU_KI,
  MENU_KD,
  MENU_TEMP,
  MENU_TINCAL,
  MENU_TMEN,
  MENU_TRAC,
  MENU_MAX_NUM
};

LiquidCrystal lcd(12, 11, 5, 4, 3, 2);
double temp_dorita = 30;
double kp = 5;
double ki=3;
double kd=2;
float temp_q = 0;
Menus scroll_menu = MENU_MAIN;
Menus current_menu =  MENU_MAIN;
int timp_inc=60;
int timp_men=30;
int timp_rac=40;

//PID variables
double setpoint = 30;
double dt=100;

double eroare= 0;
double suma_erori= 0;
double eroare_anterioara = 0;
double derivativa = 0;
double output_PID = 0;
unsigned long int maxOutput = 0; //worst case scenario...to be overwritten dinamic
long int minOutput = 0;
unsigned long long int delta = 0;
unsigned int output_PID_proportionated = 0;

//loop variables
int loop_delay_ms = 1;
int nr_of_loops_equiv_of_dt = (int)dt / loop_delay_ms;
int counter_of_loops_until_call_PID =0;
int counter_of_loops_with_bulb_on = 0;

//------temp actuala----
int sec=00;
int min=00;
int hr=12;
int i=0;
int j=0;
double temp_ambientala;

void state_machine(enum Menus menu, enum Buttons button);
Buttons GetButtons(void);
void print_menu(enum Menus menu);

typedef void (state_machine_handler_t)(void);

void print_menu(enum Menus menu)
{
  lcd.clear();
  switch(menu)
  {
    case MENU_KP:
      lcd.print("KP = ");
      lcd.print(kp);
      break;
    case MENU_KI:
      lcd.setCursor(0, 0);
      lcd.print("KI = ");
      lcd.setCursor(5, 0);
      lcd.print(ki);
      break;
    case MENU_KD:
      lcd.setCursor(0, 0);
      lcd.print("KD = ");
      lcd.setCursor(5, 0);
      lcd.print(kd);
      break;
    case MENU_TEMP:
      lcd.setCursor(0, 0);
      lcd.print("Temp= ");
      if (temp_dorita < 50)
      { lcd.setCursor(7, 0);
        lcd.print(temp_dorita);
      }
      else
      { lcd.setCursor(7, 1);
        lcd.print("MAX!");
      }
      break;
    case MENU_TINCAL:
      lcd.setCursor(0, 0);
      lcd.print("TINCAL = ");
      lcd.setCursor(9, 0);
      lcd.print(timp_inc);
      break;
    case MENU_TMEN:
      lcd.setCursor(0, 0);
      lcd.print("TMEN = ");
      lcd.setCursor(7, 0);
      lcd.print(timp_men);
      break;
    case MENU_TRAC:
      lcd.setCursor(0, 0);
      lcd.print("TRAC = ");
      lcd.setCursor(7, 0);
      lcd.print(timp_rac);
      break;
    case MENU_MAIN:
    default:
      lcd.setCursor(0, 0);
      lcd.print("TEMP ACT: ");
      lcd.setCursor(12,0);
      temp_ambientala=getTemp(); //functie care returneaza temperatura in grade celsius
      if(temp_ambientala!=999 && temp_ambientala<80)  //temperatura maxima pe care o poate masura senzoorul este 85'C
      lcd.print(temp_ambientala);
      else lcd.print("Nu merge!");
      lcd.setCursor(0, 1);
      lcd.print("TEMP DOR: ");
      lcd.setCursor(12,1);
      lcd.print(temp_dorita);
      break;
  }
  if(current_menu != MENU_MAIN)
  {
    lcd.setCursor(0,1);
    lcd.print("modifica");
  }
}

void enter_menu(void)
{
  current_menu = scroll_menu;
}

void go_home(void)
{
  scroll_menu = MENU_MAIN;
  current_menu = scroll_menu;
}

void go_next(void)
{
  scroll_menu = (Menus) ((int)scroll_menu + 1);
  scroll_menu = (Menus) ((int)scroll_menu % MENU_MAX_NUM);
}

void go_prev(void)
{
  scroll_menu = (Menus) ((int)scroll_menu - 1);
  scroll_menu = (Menus) ((int)scroll_menu % MENU_MAX_NUM);
}
void save(void)
{
  go_home();
}

//Kp
void save_kp(void)
{
}

void inc_kp(void)
{
  kp++;
}

void dec_kp(void)
{
  kp--;
}
//Ki
void save_ki(void)
{
}

void inc_ki(void)
{
  ki++;
}

void dec_ki(void)
{
  ki--;
}
//Kd
void save_kd(void)
{
}

void inc_kd(void)
{
  kd++;
}

void dec_kd(void)
{
  kd--;
}
//temp
void save_temp(void)
{
}

void inc_temp(void)
{
  temp_dorita++;
}

void dec_temp(void)
{
  temp_dorita--;
}
void inc_timp_inc(void)
{
  timp_inc++;
}

void dec_timp_inc(void)
{
  timp_inc--;
}
void inc_timp_men(void)
{
  timp_men++;
}

void dec_timp_men(void)
{
  timp_men--;
}
void inc_timp_rac(void)
{
  timp_rac++;
}

void dec_timp_rac(void)
{
  timp_rac--;
}

state_machine_handler_t* sm[MENU_MAX_NUM][EV_MAX_NUM] = 
{ //events: OK , CANCEL , NEXT, PREV
  {enter_menu, go_home, go_next, go_prev},  // MENU_MAIN    
  {save, go_home, inc_kp, dec_kp},       // MENU_KP
  {save, go_home, inc_ki,dec_ki},       // MENU_Ki
  {save, go_home, inc_kd,dec_kd},       // MENU_Kd
  {save, go_home, inc_temp, dec_temp},   // MENU_TEMP
  {save, go_home, inc_timp_inc, dec_timp_inc},  // MENU_TINCAL
  {save, go_home, inc_timp_men, dec_timp_men},        // MENU_TMEN
  {save, go_home, inc_timp_rac, dec_timp_rac}         // MENU_TRAC
};

void state_machine(enum Menus menu, enum Buttons button)
{
  sm[menu][button]();
}

Buttons GetButtons(void)
{
  enum Buttons ret_val = EV_NONE;
  if (digitalRead(BUTTON_OK))
  {
    ret_val = EV_OK;
  }
  else if (digitalRead(BUTTON_CANCEL))
  {
    ret_val = EV_CANCEL;
  }
  else if (digitalRead(BUTTON_NEXT))
  {
    ret_val = EV_NEXT;
  }
  else if (digitalRead(BUTTON_PREV))
  {
    ret_val = EV_PREV;
  }
  //Serial.print(ret_val);
  return ret_val;
}

void setup()
{
  Serial.begin(9600);
  lcd.begin(16,2);
  bmp180.begin();
  pinMode(6, INPUT);
  digitalWrite(6, LOW); // pull-down
    pinMode(7, INPUT);
  digitalWrite(7, LOW); // pull-down
    pinMode(8, INPUT);
  digitalWrite(8, LOW); // pull-down
    pinMode(9, INPUT);
  digitalWrite(9, LOW); // pull-down
  pinMode(10, OUTPUT);
}
void reglare_temp()
{
  if(temp_ambientala<temp_dorita)
    digitalWrite(10,HIGH);
  else if(temp_ambientala>temp_dorita) 
    digitalWrite(10,LOW);
}
void PID()
{
  eroare = temp_dorita - temp_ambientala;
  suma_erori= suma_erori + eroare;
  derivativa = (eroare - eroare_anterioara);
  output_PID = (kp * eroare) + (ki * suma_erori ) + (kd * derivativa);
  if (output_PID > maxOutput)
    maxOutput = (unsigned long int)output_PID;

  if (output_PID < minOutput)
    minOutput = (long int)output_PID;

  delta = (unsigned long long int) maxOutput - (unsigned long long int)minOutput;

//output_PID = output_PID * abs(eroare);
//minOutput = minOutput * abs(eroare);
//maxOutput = maxOutput * abs(eroare);
  //output_PID = abs(output_PID);
  output_PID_proportionated = map(output_PID,minOutput,maxOutput,0, 200);// how many clk_cycles will be the bulb on
  //output_PID_proportionated = abs(output_PID_proportionated - 255);
  eroare_anterioara = eroare;

  //Serial.print("    ");
  //Serial.print(temp_ambientala);
  //Serial.print("\n");
}

void loop()
{
  volatile Buttons event = GetButtons();
  if (event != EV_NONE)
  {
    state_machine(current_menu, event);
    delay(500);
  }
    print_menu(scroll_menu);

    //if(temp_ambientala >= temp_dorita && temp_ambientala <= temp_dorita+0.3)
    //{
    //  suma_erori = 0;
    //}
    
    counter_of_loops_until_call_PID=(counter_of_loops_until_call_PID+1) % nr_of_loops_equiv_of_dt;
    if(counter_of_loops_until_call_PID==0)
    {
      PID();
      //counter_of_loops_with_bulb_on = (unsigned long int)output_PID * (unsigned long int)nr_of_loops_equiv_of_dt/delta;


      
      Serial.print(output_PID);
      Serial.print("    ");
      Serial.print(temp_ambientala);
      Serial.print("    ");
      Serial.print(temp_dorita);
      Serial.print("    ");
      Serial.print(eroare);
      Serial.print("    ");
      Serial.print(suma_erori);
      Serial.print("    ");
      Serial.print(derivativa);
      Serial.print("    ");
      Serial.print(output_PID_proportionated);
      Serial.print("\n");
    }


    analogWrite(10,output_PID_proportionated);//aprinde bec;


    
    //reglare_temp();
    delay(loop_delay_ms);
}
double getTemp()    //functie care returneaza temperatura in grade celsius
{
  char status;
  double Temp,newTemp;
  status = bmp180.startTemperature();

    if (status != 0)
   {
    delay(status);
    status = bmp180.getTemperature(Temp);
        if (status != 0)
            newTemp = Temp;
        return newTemp;    
    }
  else return 999;
}
